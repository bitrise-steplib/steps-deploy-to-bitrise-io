format_version: "5"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - TZ: UTC
  - STEP_ID_IN_STEPLIB: deploy-to-bitrise-io

  # define these in your .bitrise.secrets.yml
  - BITRISE_BUILD_URL: $BITRISE_BUILD_URL
  - BITRISE_BUILD_API_TOKEN: $BITRISE_BUILD_API_TOKEN
  - BITRISE_DEPLOY_PATH: $BITRISE_DEPLOY_DIR
  - NOTIFY_USER_GROUPS: $NOTIFY_USER_GROUPS
  - NOTIFY_EMAIL_LIST: $NOTIFY_EMAIL_LIST
  #
  - SAMPLE_ARTIFACTS_GIT_CLONE_URL: https://github.com/bitrise-io/sample-artifacts.git

workflows:
  test:
    steps:
    - git::https://github.com/bitrise-steplib/steps-check.git: { }

  ci:
    before_run:
    - _download_sample_artifacts
    - test
    after_run:
    - _build_artifact_download_urls
    - _intermediate_file_download_urls
    - _file_redaction
    - _zero_length_file_upload
    - _test_results_deployment
    steps:
    - change-workdir:
        run_if: true
        inputs:
        - path: ./_tmp
        - is_create_path: true
    - path::./:
        title: IOS Test uncompressed
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./ipas
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: IOS and macOS XcArchive
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./archives
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            if [[ "$BITRISE_ARTIFACT_DETAILS_PAGE_URL_MAP" != *"ios.xcarchive.zip"* ]]; then
              echo "iOS archive was not deployed"
              exit 1
            fi

            if [[ "$BITRISE_PERMANENT_DOWNLOAD_URL_MAP" != *"macos.xcarchive.zip"* ]]; then
              echo "macOS archive was not deployed"
              exit 1
            fi
    - path::./:
        title: IOS Test compressed with default name
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "true"
        - deploy_path: ./ipas
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: IOS Test compressed with custom name
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "true"
        - zip_name: zip-name-test
        - deploy_path: ./ipas
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Android AAB Test uncompressed
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./aab/app-release.aab
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Android Test uncompressed
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./apks
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Android Test compressed with default name
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "true"
        - deploy_path: ./apks
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Android Test compressed with custom name
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "true"
        - zip_name: zip-name-test
        - deploy_path: ./apks
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Android Test compressed with custom name from file path
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "true"
        - zip_name: zip-name-test
        - deploy_path: ./apks/app-debug.apk
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Force turn on the parallel uploads
            envman add --key BITRISE_DEPLOY_UPLOAD_CONCURRENCY --value "10"
    - path::./:
        title: Many xml resources test
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./xmls
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - set-env-var:
        is_always_run: true
        inputs:
        - destination_keys: PIPELINE_FILE_3
        - value: ./xcresults/xcresult3-flaky-with-rerun.xcresult
    - path::./:
        title: Pipeline intermediate file upload
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: ./ipas/ios-simple-objc.ipa
        - pipeline_intermediate_files: |-
            ./ipas/ios-simple-objc.ipa:PIPELINE_FILE_1
            ./xcresults/xcresult3-flaky-with-rerun.xcresult:PIPELINE_FILE_2
            PIPELINE_FILE_3
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - path::./:
        title: Deploy path points to invalid path
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - is_compress: "false"
        - deploy_path: /tmp/nonexistent
        - notify_user_groups: $NOTIFY_USER_GROUPS
        - notify_email_list: $NOTIFY_EMAIL_LIST
        - is_enable_public_page: "true"
        - debug_mode: "true"
    - script:
        title: Output (generated by the Step) tests
        inputs:
        - content: |-
            if [ -z "$BITRISE_PUBLIC_INSTALL_PAGE_URL" ]; then
                echo "BITRISE_PUBLIC_INSTALL_PAGE_URL is empty"
                exit 1
            fi
            if [ -z "$BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP" ]; then
                echo "BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP is empty"
                exit 1
            fi
            if [ -z "$BITRISE_PERMANENT_DOWNLOAD_URL_MAP" ]; then
                echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP is empty"
                exit 1
            fi
            echo "-> BITRISE_PUBLIC_INSTALL_PAGE_URL: ${BITRISE_PUBLIC_INSTALL_PAGE_URL}"
            echo "-> BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP: ${BITRISE_PUBLIC_INSTALL_PAGE_URL_MAP}"
            echo "-> BITRISE_PERMANENT_DOWNLOAD_URL_MAP: ${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}"

  _download_sample_artifacts:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf ./_tmp
    - script:
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            git clone --depth 1 $SAMPLE_ARTIFACTS_GIT_CLONE_URL ./_tmp

  _test_results_deployment:
    steps:
    - custom-test-results-export:
        inputs:
        - test_name: multi_level_UI_tests
        - base_path: ./
        - search_pattern: "*/xcresult3_multi_level_UI_tests.xcresult"
    - path::./:
        title: Test result deployment
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - deploy_path: ""
        - debug_mode: "true"

  _zero_length_file_upload:
    steps:
    - script:
        is_always_run: true
        inputs:
        - content: touch 0_length_file.txt
    - path::./:
        title: Zero length file upload test
        run_if: true
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - deploy_path: 0_length_file.txt
        - debug_mode: "true"

  _file_redaction:
    steps:
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Create empty temporary file
            temp_file_path=$(mktemp)
            # Add some content
            echo "this is not a secret\nthis is a secret\nagain not a secret\n" > $temp_file_path

            # Export the file and the secret as env vars
            envman add --key FILE_TO_REDACT --value "${temp_file_path}"
            envman add --key SUPER_SECRET --value "this is a secret" --sensitive
    - path::./:
        title: File redaction test
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - deploy_path: ""
        - files_to_redact: $FILE_TO_REDACT
        - debug_mode: "true"
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            actual_content=$(<$FILE_TO_REDACT)
            expected_content="this is not a secret\n[REDACTED]\nagain not a secret\n"

            # Fail if the content of the redacted file does not meat our expected value
            if [[ "$actual_content" != "$expected_content" ]]; then
                echo "$FILE_TO_REDACT was not redacted"
                echo "Actual content: "$actual_content""
                echo "Expected content: "$expected_content""
                exit 1
            fi

  _build_artifact_download_urls:
    steps:
    - path::./:
        title: Upload Artifact
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - permanent_download_url_map_format: "{{range $index, $element := .}}{{if eq $index 0}}{{$element.URL}}{{end}}{{end}}"
        - deploy_path: ./ipas/ios-simple-objc.ipa
        - debug_mode: "true"
    - bundle::validate_urls: { }
    - path::./:
        title: Upload Artifact and Intermediate File
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - permanent_download_url_map_format: "{{range $index, $element := .}}{{if eq $index 0}}{{$element.URL}}{{end}}{{end}}"
        - deploy_path: ./ipas/ios-simple-objc.ipa
        - pipeline_intermediate_files: ./ipas/ios-simple-objc.ipa:IPA
        - debug_mode: "true"
    - bundle::validate_urls: { }

  _intermediate_file_download_urls:
    steps:
    - path::./:
        title: Upload Intermediate File
        run_if: "true"
        inputs:
        - build_url: $BITRISE_BUILD_URL
        - build_api_token: $BITRISE_BUILD_API_TOKEN
        - permanent_download_url_map_format: "{{range $index, $element := .}}{{if eq $index 0}}{{$element.URL}}{{end}}{{end}}"
        - deploy_path: ./ipas/ios-simple-objc.ipa
        - pipeline_intermediate_files: ./ipas/ios-simple-objc.ipa:IPA
        - debug_mode: "true"
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP: $BITRISE_PERMANENT_DOWNLOAD_URL_MAP"
            if [ -z "${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}" ]; then
                echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP is empty"
                exit 1
            elif ! curl --head --silent --fail "${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}" > /dev/null; then
                echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP is invalid"
                exit 1
            fi

  generate_readme:
    steps:
    - git::https://github.com/bitrise-steplib/steps-readme-generator.git@main:
        inputs:
        - example_section: docs/examples.md

step_bundles:
  validate_urls:
    steps:
    - script:
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            echo "BITRISE_PUBLIC_INSTALL_PAGE_URL: $BITRISE_PUBLIC_INSTALL_PAGE_URL"
            if [ -z "${BITRISE_PUBLIC_INSTALL_PAGE_URL}" ]; then
                echo "BITRISE_PUBLIC_INSTALL_PAGE_URL is empty"
                exit 1
            elif ! curl --head --silent --fail "${BITRISE_PUBLIC_INSTALL_PAGE_URL}" > /dev/null; then
                echo "BITRISE_PUBLIC_INSTALL_PAGE_URL is invalid"
                exit 1
            fi

            echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP: $BITRISE_PERMANENT_DOWNLOAD_URL_MAP"
            if [ -z "${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}" ]; then
                echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP is empty"
                exit 1
            elif ! curl --head --silent --fail "${BITRISE_PERMANENT_DOWNLOAD_URL_MAP}" > /dev/null; then
                echo "BITRISE_PERMANENT_DOWNLOAD_URL_MAP is invalid"
                exit 1
            fi

            echo "BITRISE_ARTIFACT_DETAILS_PAGE_URL: $BITRISE_ARTIFACT_DETAILS_PAGE_URL"
            if [ -z "${BITRISE_ARTIFACT_DETAILS_PAGE_URL}" ]; then
                echo "BITRISE_ARTIFACT_DETAILS_PAGE_URL is empty"
                exit 1
            elif ! curl --head --silent --fail "${BITRISE_ARTIFACT_DETAILS_PAGE_URL}" > /dev/null; then
                echo "BITRISE_ARTIFACT_DETAILS_PAGE_URL is invalid"
                exit 1
            fi
